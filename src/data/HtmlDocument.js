// src/data/documents.js

export const HtmlDocumentFirst = [
    {
        id: 1,
        // title: "Что такое HTML?",
        content: [
            { type: 'header', value: 'Что такое HTML ?' },

            { type: 'text', value: 'HTML (HyperText Markup Language) — это язык разметки, предназначенный для создания и структурирования содержимого веб-страниц. Он позволяет браузерам интерпретировать документы, определяя, как текст и медиа-элементы должны отображаться на экране. HTML не является языком программирования; он используется для разметки текста и управления его представлением с помощью тегов, которые обозначают начало и конец различных элементов.' },
        ],
    },
    {
        id: 2,
        // title: "Что такое HTML?",
        content: [
            { type: 'header', value: 'Зачем нужен HTML?' },

            { type: 'text', value: 'HTML используется для:' },
            { type: 'text', value: '1. Структурирования контента: Определяет, какие элементы на странице являются заголовками, абзацами, списками и т.д.' },
            { type: 'text', value: '2. Создания гиперссылок: Позволяет связывать различные страницы и ресурсы в интернете.' },
            { type: 'text', value: '3. Интеграции мультимедиа: Поддерживает встраивание изображений, видео и аудио на веб-страницы.' },
            { type: 'text', value: '4. Обеспечения доступности: Позволяет создавать страницы, доступные для пользователей с ограниченными возможностями.' },
            { type: 'text', value: 'HTML стал основой для веб-разработки и продолжает эволюционировать, адаптируясь к новым требованиям и технологиям, что делает его ключевым инструментом для создания современных веб-сайтов и приложений.' },
        ],
    },
    {
        id: 3,
        // title: "Что такое HTML?",
        content: [
            { type: 'header', value: 'Темы, которые мы рассмотрим' },

            { type: 'text', value: '1. Основы HTML' },
            { type: 'text', value: '2. Формы и валидация' },
            { type: 'text', value: '3. Таблицы' },
            { type: 'text', value: '4. Мультимедиа' },
            { type: 'text', value: '5. Фреймы' },
            { type: 'text', value: 'Этот курс предназначен для всех, кто хочет начать свой путь в веб-разработке или улучшить свои навыки в HTML. Мы будем использовать практические примеры и задания, чтобы вы могли применить полученные знания на практике' },

        ],
    },

];


// --------------------------------------------------------------------------------

export const HtmlDocumentSecond = [
    {
        id: 1,
        title: "Структура HTML-документа",
        content: [
            { type: 'text', value: 'Первая строка HTML-документа должна содержать объявление типа документа (DOCTYPE). Это сообщает браузеру, какую версию HTML использует документ. Для HTML5 объявление выглядит так:' },
            { type: 'code', value: '<!DOCTYPE html>' },
        ],
    },
    {
        id: 2,
        title: "Открывающий тег <html>",
        content: [
            { type: 'text', value: 'После объявления DOCTYPE следует открывающий тег <html>, который обозначает начало HTML-документа. Весь код документа будет находиться внутри этого тега.' },
            { type: 'code', value: `    
    <!DOCTYPE html> 
    <html>
    <!-- Содержимое документа -->
    </html>
            ` },
        ],
    },
    {
        id: 3,
        title: "Раздел <head>",
        content: [
            { type: 'text', value: 'Внутри тега <html> находится раздел <head>, который содержит служебную информацию о документе, такую как заголовок, кодировку, подключаемые файлы стилей и скриптов.' },
            { type: 'code', value: `
<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <title>Мой HTML-документ</title>
        <link rel="stylesheet" href="styles.css">
    </head>
  <!-- Тело документа -->
</html>

            ` },
        ],
    },
    {
        id: 4,
        title: "Раздел <body>",
        content: [
            { type: 'text', value: 'После <head> идет раздел <body>, который содержит все видимое содержимое страницы: текст, изображения, ссылки, формы и т.д.' },
            { type: 'code', value: `
<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <title>Мой HTML-документ</title>
        <link rel="stylesheet" href="styles.css">
    </head>
    <body>
        <h1>Добро пожаловать на мой сайт!</h1>
        <p>Это мой первый HTML-документ.</p>
        <img src="logo.png" alt="Логотип">
    </body>
</html>

            ` },
            { type: 'text', value: 'Вот основная структура HTML-документа. Внутри <body> можно добавлять любые теги для создания структуры и содержимого страницы. Помните, что каждый открывающий тег должен иметь соответствующий закрывающий тег (кроме некоторых самозакрывающихся тегов).' },

        ],
    },
];

// --------------------------------------------------------------------------------

export const HtmlDocumenеТhird = [
    {
        id: 1,
        title: "Базовые теги HTML",
        content: [
            { type: 'text', value: 'В этом разделе мы рассмотрим основные теги HTML, которые используются для создания структуры и содержания веб-страниц. Мы обсудим заголовки, абзацы, списки, ссылки и изображения.' },
            { type: 'header', value: 'Заголовки' },
            { type: 'text', value: 'Заголовки используются для обозначения иерархии информации на странице. В HTML есть шесть уровней заголовков, от <h1> до <h6>. <h1> — это самый важный заголовок, а <h6> — самый менее важный.'},
            { type: 'code', value: `
<h1>Главный заголовок</h1>
<h2>Подзаголовок первого уровня</h2>
<h3>Подзаголовок второго уровня</h3>
<h4>Подзаголовок третьего уровня</h4>
<h5>Подзаголовок четвертого уровня</h5>
<h6>Подзаголовок пятого уровня</h6>

            ` },
        ],
    },
    {
        id: 2,
        // title: "",
        content: [
            { type: 'header', value: 'Абзацы' },
            { type: 'text', value: 'Абзацы создаются с помощью тега <p>. Этот тег используется для группировки текста в логические блоки. Каждый абзац будет отображаться с отступом сверху и снизу.' },
            { type: 'code', value: `
<p>Это первый абзац текста на странице.</p>
<p>Это второй абзац текста, который следует за первым.</p>

            ` },
        ],
    },
    {
        id: 3,
        // title: "Урок 2",
        content: [
            { type: 'header', value: 'Списки' },
            { type: 'text', value: 'HTML поддерживает два основных типа списков: нумерованные (упорядоченные) и ненумерованные (неупорядоченные).' },
            { type: 'header', value: 'Ненумерованные списки' },
            { type: 'text', value: 'Ненумерованные списки создаются с помощью тега <ul> (unordered list), а каждый элемент списка обозначается тегом <li> (list item).' },            
            { type: 'code', value: `
<ul>
    <li>Первый элемент списка</li>
    <li>Второй элемент списка</li>
    <li>Третий элемент списка</li>
</ul>

            ` },
            { type: 'header', value: 'Нумерованные списки' },
            { type: 'text', value: 'Нумерованные списки создаются с помощью тега <ol> (ordered list), также с элементами списка <li>.' },
            { type: 'code', value: `
<ol>
    <li>Первый элемент списка</li>
    <li>Второй элемент списка</li>
    <li>Третий элемент списка</li>
</ol>

            ` },
        ],
    },
    {
        id: 4,
        // title: "Урок 2",
        content: [
            { type: 'header', value: 'Ссылки' },
            { type: 'text', value: 'Ссылки создаются с помощью тега <a> (anchor). Атрибут href указывает адрес, на который ведет ссылка. Для открытия ссылки в новом окне можно использовать атрибут target="_blank".' },
            { type: 'code', value: `
<a href="https://www.example.com">Это ссылка на Example.com</a>
<a href="https://www.example.com" target="_blank">Открыть в новом окне</a>

            ` },
        ],
    },
    {
        id: 5,
        // title: "Урок 2",
        content: [
            { type: 'header', value: 'Изображения' },
            { type: 'text', value: 'Изображения вставляются с помощью тега <img>. Этот тег является самозакрывающимся и требует атрибут src (source) для указания пути к изображению и атрибут alt для описания изображения.' },
            { type: 'code', value: `
            <img src="image.jpg" alt="Описание изображения" width="300" height="200">
            ` },
        ],
    },
    {
        id: 6,
        // title: "Урок 2",
        content: [
            { type: 'header', value: 'Пример использования базовых тегов' },
            { type: 'text', value: 'Вот пример HTML-документа, который использует все рассмотренные базовые теги:' },
            { type: 'code', value: `
<!DOCTYPE html>
<html>
        <head>
            <meta charset="UTF-8">
            <title>Базовые теги HTML</title>
        </head>
        <body>
                <h1>Мой первый веб-сайт</h1>
                <p>Добро пожаловать на мой сайт! Здесь вы найдете много интересного.</p>
                
                <h2>Мои увлечения</h2>
                <ul>
                  <li>Программирование</li>
                  <li>Чтение книг</li>
                  <li>Путешествия</li>
                </ul>
                
                <h2>Мои любимые фильмы</h2>
                <ol>
                  <li>Фильм 1</li>
                  <li>Фильм 2</li>
                  <li>Фильм 3</li>
                </ol>
                
                <h2>Контакты</h2>
                <p>Вы можете связаться со мной по <a href="mailto:example@example.com">электронной почте</a>.</p>
                
                <h2>Изображение</h2>
                <img src="logo.png" alt="Логотип" width="300" height="200">
        </body>
</html>
            
            ` },
        ],
    },
];

// --------------------------------------------------------------------------------

export const HtmlDocumentFourth = [
    {
        id: 1,
        // title: "Что такое HTML?",
        content: [
            { type: 'header', value: 'Атрибуты тегов HTML' },
            { type: 'text', value: 'Атрибуты в HTML — это специальные свойства, которые добавляются к тегам для управления их поведением и отображением. Они предоставляют дополнительную информацию о элементах и могут изменять их функциональность. Давайте рассмотрим основные аспекты атрибутов.' },
        ],
    },
    {
        id: 2,
        // title: "",
        content: [
            { type: 'header', value: '1. Синтаксис атрибутов' },
            { type: 'text', value: 'Атрибуты записываются в начальном теге и имеют следующую структуру:' },
            { type: 'code', value: '<имяТега атрибут="значение">Содержимое</имяТега> ' },
            { type: 'text', value: 'Для одиночных тегов (например, <img>) синтаксис будет выглядеть так:' },
            { type: 'code', value: '<img src="image.jpg" alt="Описание изображения">' },

        ],
    },
    {
        id: 3,
        // title: "",
        content: [
            { type: 'header', value: '2. Виды атрибутов' },
            { type: 'text', value: 'Атрибуты HTML можно разделить на несколько категорий:' },
            { type: 'text', value: 'Глобальные атрибуты: Эти атрибуты могут использоваться с любым тегом. Например, id, class, style, title.' },
            { type: 'text', value: 'Атрибуты событий: Эти атрибуты используются для обработки событий, таких как нажатие кнопки или наведение курсора. Например, onclick, onmouseover.' },
            { type: 'text', value: 'Необходимые и необязательные атрибуты: Некоторые атрибуты обязательны для определенных тегов, например, href для тега <a>, тогда как другие могут быть опциональными.' },
        ],
    }, 
    {
        id: 4,
        // title: "Примеры атрибутов",
        content: [
            { type: 'header', value: 'Глобальные атрибуты' },

            { type: 'text', value: 'id: Уникальный идентификатор элемента.' },
            { type: 'code', value: '<p id="myParagraph">Это абзац с уникальным идентификатором.</p>' },

            { type: 'text', value: 'class: Класс элемента, который может использоваться для стилизации с помощью CSS.' },
            { type: 'code', value: '<p class="highlight">Этот текст выделен классом.</p>' },

            { type: 'text', value: ' style: Встраиваемый стиль для элемента.' },
            { type: 'code', value: '<p style="color: red;">Этот текст красного цвета.</p>' },
            
            { type: 'header', value: 'Атрибуты изображений' },

            { type: 'text', value: 'src: Указывает путь к изображению.' },
            { type: 'code', value: '<img src="logo.png" alt="Логотип компании">' },

            { type: 'text', value: 'alt: Альтернативный текст, который отображается, если изображение не может быть загружено.' },
            { type: 'code', value: '<img src="missing-image.png" alt="Изображение отсутствует">' },

            { type: 'header', value: 'Атрибуты ссылок' },

            { type: 'text', value: 'href: Указывает URL, на который ведет ссылка.' },
            { type: 'code', value: '<a href="https://www.example.com">Посетить Example.com</a>' },

            { type: 'text', value: 'target: Определяет, как открывать ссылку. Например, _blank открывает ссылку в новом окне.' },
            { type: 'code', value: '<a href="https://www.example.com" target="_blank">Открыть в новом окне</a>' },

        ],
    }, 
    {
        id: 5,
        // title: "Основные возможности HTML",
        content: [
            { type: 'header', value: '4. Применение нескольких атрибутов' },

            { type: 'text', value: 'К одному тегу можно применять несколько атрибутов одновременно. Например:' },
            { type: 'code', value: '<a href="https://www.example.com" target="_blank" title="Перейти на Example.com">Ссылка</a> ' },
        ],
    }, 
    {
        id: 6,
        // title: "Основные возможности HTML",
        content: [
            { type: 'header', value: 'Заключение' },
            { type: 'text', value: 'Атрибуты играют важную роль в HTML, позволяя управлять поведением и отображением элементов на странице. Изучая атрибуты, вы сможете создавать более функциональные и интерактивные веб-страницы. Практикуйтесь в использовании различных атрибутов, чтобы лучше понять их применение.' },

        ],
    },  
];

// --------------------------------------------------------------------------------

export const HtmlDocumentFifth = [
    {
        id: 1,
        // title: "",
        content: [
            { type: 'header', value: 'Семантическая верстка' },

            { type: 'text', value: 'Семантическая верстка — это подход к созданию веб-страниц, который основывается на использовании HTML-тегов в соответствии с их смысловым назначением. Это позволяет создавать логически структурированные страницы, которые легче воспринимаются как пользователями, так и поисковыми системами.' },
            { type: 'header', value: '1. Зачем нужна семантическая верстка?' },
            
            { type: 'text', value: 'Семантическая верстка помогает:' },
            { type: 'text', value: '1.1 Улучшить доступность: Правильное использование семантических тегов делает контент более доступным для людей с ограниченными возможностями, так как вспомогательные технологии (например, экранные читалки) могут лучше интерпретировать структуру страницы.' },
            { type: 'text', value: '1.2 Оптимизировать SEO: Поисковые системы могут лучше индексировать страницы, которые имеют четкую и логичную структуру. Семантические теги помогают поисковым системам понять, о чем страница, что может улучшить ее ранжирование.' },
            { type: 'text', value: '1.3 Упростить поддержку и развитие кода: Логически структурированный код легче читать и поддерживать, что упрощает работу для разработчиков.' },
            // { type: 'text', value: '' },
           
            // { type: 'code', value: '' },
        ],
    },
    {
        id: 2,
        // title: "Что такое HTML?",
        content: [
            { type: 'header', value: '2. Основные семантические теги HTML' },
            { type: 'text', value: 'HTML5 ввел множество новых семантических тегов, которые помогают структурировать контент. Вот некоторые из них:' },
            { type: 'text', value: '2.1 <header>: Используется для определения верхней части страницы или раздела, обычно содержит заголовок и навигацию.' },
            { type: 'code', value: `
<header>
        <h1>Заголовок сайта</h1>
        <nav>
            <ul>
                <li><a href="#home">Главная</a></li>
                <li><a href="#about">О нас</a></li>
            </ul>
        </nav>
</header>

            ` },
            { type: 'text', value: '2.2 <nav>: Определяет навигационные ссылки.' },
            { type: 'code', value: `
<nav>
        <ul>
                <li><a href="#services">Услуги</a></li>
                <li><a href="#contact">Контакты</a></li>
        </ul>
</nav>

            ` },
            { type: 'text', value: '2.3 <main>: Основной контент страницы, который является уникальным для данной страницы.' },
            { type: 'code', value: `
<main>
        <article>
                <h2>Статья 1</h2>
                <p>Содержимое статьи...</p>
        </article>
</main>

            ` },

            { type: 'text', value: '2.4 <article>: Самодостаточный контент, который может быть независимым и иметь смысл сам по себе.' },
            { type: 'code', value: `
<article>
        <h2>Заголовок статьи</h2>
        <p>Текст статьи...</p>
</article>

            ` },

            { type: 'text', value: '2.5 <section>: Определяет раздел страницы, который может содержать заголовок и контент.' },
            { type: 'code', value: `
<section>
        <h2>Раздел 1</h2>
        <p>Содержимое раздела...</p>
</section>

            ` },

            { type: 'text', value: '2.6 <footer>: Используется для определения нижней части страницы или раздела, часто содержит информацию об авторских правах и ссылки на политику конфиденциальности.' },
            { type: 'code', value: `
<footer>
        <p>&copy; 2024 Моя компания. Все права защищены.</p>
</footer>

            ` },

        ],
    },
    {
        id: 3,
        // title: "Что такое HTML?",
        content: [
            { type: 'header', value: '3. Примеры семантической верстки' },
            { type: 'text', value: 'Вот пример HTML-документа, использующего семантические теги:' },
            { type: 'code', value: `
<!DOCTYPE html>
<html>
<head>
        <meta charset="UTF-8">
        <title>Семантическая верстка</title>
</head>
<body>
        <header>
                <h1>Добро пожаловать на мой сайт</h1>
                <nav>
                        <ul>
                            <li><a href="#home">Главная</a></li>
                            <li><a href="#about">О нас</a></li>
                        </ul>
                </nav>
        </header>

        <main>
                <section>
                        <h2>О нас</h2>
                        <p>Мы предоставляем услуги веб-разработки.</p>
                </section>

                <article>
                        <h2>Наши услуги</h2>
                        <p>Мы предлагаем различные услуги, включая дизайн и разработку сайтов.</p>
                </article>
        </main>

        <footer>
                <p>&copy; 2024 Моя компания. Все права защищены.</p>
        </footer>
</body>
</html>

            ` },
        ],
    },
    {
        id: 4,
        // title: "Что такое HTML?",
        content: [
            { type: 'header', value: 'Заключение' },
            { type: 'text', value: 'Семантическая верстка — это важный аспект веб-разработки, который помогает создать структурированные, доступные и SEO-оптимизированные страницы. Используя семантические теги, вы не только улучшаете пользовательский опыт, но и облегчаете работу поисковым системам. Практикуйтесь в использовании семантических тегов, чтобы лучше понять их преимущества и применение.' },
        ],
    },
];

// --------------------------------------------------------------------------------

export const HtmlDocumentSixth = [
    {
        id: 1,
        // title: "Что такое HTML?",
        content: [
            { type: 'header', value: 'Теги для создания форм в HTML' },

            { type: 'text', value: 'Формы в HTML являются основным способом взаимодействия пользователей с веб-приложениями. Они позволяют собирать данные, такие как текст, выбор из списка, и отправлять их на сервер для обработки. В этом разделе мы подробно рассмотрим ключевые теги, используемые для создания форм: <form>, <input>, <textarea>, <select> и <button>.' },
            { type: 'header', value: '1. Тег <form>' },
            { type: 'text', value: 'Тег <form> является контейнером для всех элементов формы. Он определяет, как и куда будут отправляться данные формы. Основные атрибуты:' },
            { type: 'text', value: '1.1 action: URL, на который будут отправлены данные формы.' },
            { type: 'text', value: '1.2 method: Метод отправки данных. Основные значения:' },
            { type: 'text', value: '1.2.1 GET: данные отправляются в URL (подходят для небольших объемов данных).' },
            { type: 'text', value: '1.2.2 POST: данные отправляются в теле запроса (подходят для больших объемов данных и конфиденциальной информации).' },
            { type: 'code', value: `
<form action="/submit" method="POST">
      <!-- Элементы формы будут здесь -->
</form>

            ` },
        ],
    },
    {
        id: 2,
        // title: "Основные возможности HTML",
        content: [
            { type: 'header', value: '2. Тег <input>' },
            { type: 'text', value: 'Тег <input> используется для создания различных типов полей ввода. Атрибут type определяет тип поля. Вот несколько распространенных типов:' },
            { type: 'text', value: '2.1 Текстовое поле: type="text" — для ввода однострочного текста.' },
            { type: 'text', value: '2.2 Пароль: type="password" — для ввода пароля (символы скрыты).' },
            { type: 'text', value: '2.3 Электронная почта: type="email" — для ввода адреса электронной почты.' },
            { type: 'text', value: '2.4 Число: type="number" — для ввода числовых значений.' },
            { type: 'text', value: '2.5 Кнопка отправки: type="submit" — для отправки формы.' },
            { type: 'code', value: `
<input type="text" name="username" placeholder="Имя пользователя" required>
<input type="password" name="password" placeholder="Пароль" required>
<input type="email" name="email" placeholder="Электронная почта" required>
<input type="number" name="age" min="1" max="120 placeholder="Возраст">
<input type="submit" value="Отправить">

            ` },

        ],
    },

    {
        id: 3,
        // title: "Что такое HTML?",
        content: [
            { type: 'header', value: '3. Тег <textarea>' },

            { type: 'text', value: 'Тег <textarea> используется для создания многострочного текстового поля. Он позволяет пользователю вводить длинные сообщения. Атрибуты rows и cols определяют размеры текстового поля.' },
            { type: 'code', value: `
            <textarea name="message" rows="4" cols="50" placeholder="Введите ваше сообщение"></textarea>
            ` },
        ],
    },

    {
        id: 4,
        // title: "Что такое HTML?",
        content: [
            { type: 'header', value: '4. Тег <select>' },

            { type: 'text', value: 'Тег <select> используется для создания выпадающего списка. Внутри него используются теги <option> для определения элементов списка. Атрибут name определяет, как будет называться это поле при отправке формы.' },
            { type: 'code', value: `
<select name="options" required>
        <option value="" disabled selected>Выберите опцию</option>
        <option value="option1">Опция 1</option>
        <option value="option2">Опция 2</option>
        <option value="option3">Опция 3</option>
</select>

            ` },
        ],
    },

    {
        id: 5,
        // title: "Что такое HTML?",
        content: [
            { type: 'header', value: 'Тег <button>' },

            { type: 'text', value: 'Тег <button> используется для создания кнопок, которые могут выполнять действия, например, отправку формы. Он более гибкий, чем <input type="submit">, так как позволяет добавлять HTML-содержимое (например, изображения или текст).' },
            { type: 'code', value: `
            <button type="submit">Отправить</button>
            ` },
        ],
    },

    {
        id: 6,
        // title: "Что такое HTML?",
        content: [
            { type: 'header', value: '6. Пример полной формы' },

            { type: 'text', value: 'Вот пример простой формы, которая включает все вышеперечисленные элементы:' },
            { type: 'code', value: `
            <!DOCTYPE html>
<html>
<head>
        <meta charset="UTF-8">
        <title>Пример формы</title>
</head>
<body>
        <h1>Форма обратной связи</h1>
        <form action="/submit" method="POST">
                <label for="username">Имя пользователя:</label>
                <input type="text" id="username" name="username" placeholder="Введите имя пользователя" required>
                
                <label for="email">Электронная почта:</label>
                <input type="email" id="email" name="email" placeholder="Введите вашу почту" required>
                
                <label for="password">Пароль:</label>
                <input type="password" id="password" name="password" placeholder="Введите пароль" required>
                
                <label for="message">Сообщение:</label>
                <textarea id="message" name="message" rows="4" cols="50" placeholder="Введите ваше сообщение"></textarea>
            
                <label for="options">Выберите опцию:</label>
            <select id="options" name="options" required>
                    <option value="" disabled selected>Выберите опцию</option>
                    <option value="option1">Опция 1</option>
                    <option value="option2">Опция 2</option>
                    <option value="option3">Опция 3</option>
            </select>
            
            <button type="submit">Отправить</button>
        </form>
</body>
</html>
            ` },
        ],
    },

    {
        id: 7,
        // title: "Что такое HTML?",
        content: [
            { type: 'header', value: 'Заключение' },
            { type: 'text', value: 'Теги для создания форм в HTML являются основными инструментами для взаимодействия с пользователями. Используя теги <form>, <input>, <textarea>, <select> и <button>, вы можете создавать мощные и функциональные формы для сбора данных. Практикуйтесь в создании форм, чтобы лучше понять их работу и возможности.' },
        ],
    },
];

// --------------------------------------------------------------------------------

export const HtmlDocumentSeventh = [
    {
        id: 1,
        // title: "Что такое HTML?",
        content: [
            { type: 'header', value: 'Теги для создания таблиц в HTML' },

            { type: 'text', value: 'Таблицы в HTML используются для организации данных в виде строк и столбцов. Они позволяют структурировать информацию и делают ее более наглядной. В этом разделе мы рассмотрим основные теги, используемые для создания таблиц: <table>, <tr>, <th> и <td>.' },
        ],
    },
    {
        id: 2,
        // title: "Основные возможности HTML",
        content: [
            { type: 'header', value: '1. Тег <table>' },
            { type: 'text', value: 'Тег <table> является контейнером для всей таблицы. Он определяет начало и конец таблицы.' },
            { type: 'code', value: `
<table>
          <!-- Строки таблицы будут здесь -->
</table>

            ` },

        ],
    },
    {
        id: 3,
        // title: "Основные возможности HTML",
        content: [
            { type: 'header', value: '2. Тег <tr>' },
            { type: 'text', value: 'Тег <tr> (table row) определяет строку таблицы. Он должен содержать теги <th> или <td> для ячеек.' },
            { type: 'code', value: `
<tr>
        <!-- Ячейки строки будут здесь -->
</tr>

            ` },

        ],
    }, 
    {
        id: 4,
        // title: "Основные возможности HTML",
        content: [
            { type: 'header', value: '3. Тег <th>' },
            { type: 'text', value: 'Тег <th> (table header) определяет ячейку, содержащую заголовок столбца или строки. Обычно текст в ячейках <th> выделяется жирным шрифтом.' },
            { type: 'code', value: `
<th>Имя</th>
<th>Возраст</th>
<th>Город</th>

            ` },

        ],
    }, 
    {
        id: 5,
        // title: "Основные возможности HTML",
        content: [
            { type: 'header', value: '4. Тег <td>' },
            { type: 'text', value: 'Тег <td> (table data) определяет обычную ячейку таблицы, содержащую данные.' },
            { type: 'code', value: `
<td>Иван</td>
<td>25</td>
<td>Москва</td>

            ` },

        ],
    }, 
    {
        id: 6,
        // title: "Основные возможности HTML",
        content: [
            { type: 'header', value: '5. Пример таблицы' },
            { type: 'text', value: 'Вот пример простой таблицы, которая включает все вышеперечисленные теги:' },
            { type: 'code', value: `
<table>
        <tr>
                    <th>Имя</th>
                    <th>Возраст</th>
                    <th>Город</th>
        </tr>
        <tr>
                    <td>Иван</td>
                    <td>25</td>
                    <td>Москва</td>
        </tr>
        <tr>
                    <td>Мария</td>
                    <td>30</td>
                    <td>Санкт-Петербург</td>
        </tr>
        <tr>
                    <td>Петр</td>
                    <td>35</td>
                    <td>Новосибирск</td>
        </tr>
</table>

            ` },

        ],
    }, 
    {
        id: 7,
        // title: "Основные возможности HTML",
        content: [
            { type: 'header', value: '6. Дополнительные атрибуты' },
            { type: 'text', value: 'Теги таблиц могут иметь дополнительные атрибуты для настройки внешнего вида и поведения таблицы:' },
            { type: 'text', value: '6.1 border: Устанавливает ширину границы таблицы в пикселях.' },
            { type: 'text', value: '6.2 cellpadding: Устанавливает отступ между содержимым ячейки и ее границами.' },
            { type: 'text', value: '6.3 cellspacing: Устанавливает расстояние между ячейками.' },
            { type: 'text', value: '6.4 colspan: Указывает, сколько столбцов должна занимать ячейка.' },
            { type: 'text', value: '6.5 rowspan: Указывает, сколько строк должна занимать ячейка.' },
            { type: 'code', value: `
<table border="1" cellpadding="5" cellspacing="0">
        <tr>
                    <th colspan="2">Информация о пользователе</th>
        </tr>
        <tr>
                    <td>Имя</td>
                    <td>Иван</td>
        </tr>
        <tr>
                    <td rowspan="2">Контакты</td>
                    <td>email@example.com</td>
        </tr>
        <tr>
                    <td>+7 (123) 456-78-90</td>
        </tr>
</table>

            ` },

        ],
    }, 
    {
        id: 8,
        // title: "Основные возможности HTML",
        content: [
            { type: 'header', value: 'Заключение' },
            { type: 'text', value: 'Теги для создания таблиц в HTML (<table>, <tr>, <th>, <td>) позволяют структурировать данные и делать их более наглядными. Практикуйтесь в создании таблиц различной сложности, используя дополнительные атрибуты для настройки внешнего вида.' },
        ],
    }, 
];

// --------------------------------------------------------------------------------

export const HtmlDocumentEighth = [
    {
        id: 1,
        // title: "Что такое HTML?",
        content: [
            { type: 'header', value: 'Вставка видео и аудио в HTML' },
            { type: 'text', value: 'HTML5 предоставляет теги <video> и <audio> для встраивания видео и аудио контента на веб-страницы соответственно. Давайте рассмотрим, как использовать эти теги.' },
        ],
    },
    {
        id: 2,
        // title: "Основные возможности HTML",
        content: [
            { type: 'header', value: '1. Тег <video>' },
            { type: 'text', value: 'Тег <video> используется для вставки видео на страницу. Он имеет несколько атрибутов для управления воспроизведением:' },
            { type: 'text', value: '1.1 `src`: Указывает путь к видеофайлу.' },
            { type: 'text', value: '1.2 `width и height`: Устанавливают ширину и высоту видео.' },
            { type: 'text', value: '1.3 `controls`: Добавляет элементы управления воспроизведением (play, pause, volume и т.д.).' },
            { type: 'text', value: '1.4 `autoplay`: Автоматически запускает воспроизведение видео при загрузке страницы.' },
            { type: 'text', value: '1.5 `loop`: Зацикливает воспроизведение видео.' },


            { type: 'code', value: `
<video src="video.mp4" width="640" height="360" controls>
            Ваш браузер не поддерживает тег video.
</video>

            ` },
            { type: 'text', value: 'Внутри тега <video> можно добавить текст, который будет отображаться, если браузер не поддерживает тег <video>.' },
        ],
    },

    {
        id: 3,
        // title: "Что такое HTML?",
        content: [
            { type: 'header', value: '2. Тег <source>' },

            { type: 'text', value: 'Тег <source> используется внутри <video> для указания нескольких источников видео. Это полезно, когда нужно поддерживать различные форматы файлов для разных браузеров.' },
            { type: 'code', value: `
<video controls>
            <source src="video.mp4" type="video/mp4">
            <source src="video.webm" type="video/webm">
            Ваш браузер не поддерживает тег video.
</video>

            ` },
        ],
    },

    {
        id: 4,
        // title: "Что такое HTML?",
        content: [
            { type: 'header', value: '3. Тег <audio>' },

            { type: 'text', value: 'Тег <audio> используется для вставки аудио на страницу. Он работает аналогично тегу <video>, но без атрибутов для управления размером.' },
            { type: 'code', value: `
<audio src="audio.mp3" controls>
            Ваш браузер не поддерживает тег audio.
</audio>

            ` },
            { type: 'text', value: 'Внутри тега <audio> можно добавить текст, который будет отображаться, если браузер не поддерживает тег <audio>.' },

        ],
    },

    {
        id: 5,
        // title: "Что такое HTML?",
        content: [
            { type: 'header', value: '4. Пример использования <video> и <audio>' },

            { type: 'code', value: `
<h1>Видео и аудио на странице</h1>

<h2>Видео</h2>
<video src="video.mp4" width="640" height="360" controls>
            Ваш браузер не поддерживает тег video.
</video>

<h2>Аудио</h2>
<audio src="audio.mp3" controls>
            Ваш браузер не поддерживает тег audio.
</audio>

            ` },
        ],
    },

    {
        id: 6,
        // title: "Что такое HTML?",
        content: [
            { type: 'header', value: '5. Субтитры и аудиодорожки' },
            { type: 'text', value: 'Вы можете добавить субтитры и аудиодорожки к видео, используя теги <track> внутри <video>. Атрибут kind указывает тип дорожки (субтитры, описание, метки и т.д.), а src - путь к файлу дорожки.' },

            { type: 'code', value: `
<video src="video.mp4" controls>
            <track src="subtitles_en.vtt" kind="subtitles" srclang="en" label="English">
            <track src="subtitles_fr.vtt" kind="subtitles" srclang="fr" label="Français">
</video>
                      
            ` },
        ],
    },
    {
        id: 7,
        // title: "Что такое HTML?",
        content: [
            { type: 'header', value: 'Заключение' },

            { type: 'text', value: 'Теги <video> и <audio> позволяют легко встраивать мультимедийный контент на веб-страницы. Используйте атрибуты для управления воспроизведением и добавляйте несколько источников для поддержки различных форматов файлов. Также не забывайте о субтитрах и аудиодорожках для улучшения доступности. Практикуйтесь в использовании этих тегов, чтобы создавать интерактивные и мультимедийные веб-страницы.' },
        ],
    },

];

// --------------------------------------------------------------------------------

export const HtmlDocumentNinth = [
    {
        id: 1,
        // title: "Что такое HTML?",
        content: [
            { type: 'header', value: 'Фреймы в HTML' },

            { type: 'text', value: 'Фреймы позволяют вставлять сторонние сайты или контент на вашу веб-страницу с помощью тега <iframe>. Это может быть полезно для отображения карт, видео, форм и других ресурсов, не покидая текущую страницу. Давайте рассмотрим, как использовать <iframe>, его атрибуты и аспекты безопасности.' },
        ],
    },
    {
        id: 2,
        // title: "Основные возможности HTML",
        content: [
            { type: 'header', value: '1. Вставка сторонних сайтов с помощью тега <iframe>' },
            { type: 'text', value: 'Тег <iframe> (inline frame) используется для встраивания другого HTML-документа в текущую страницу. Это может быть как внешний сайт, так и внутренний ресурс.' },
            { type: 'code', value: '<iframe src="https://www.example.com" width="600" height="400"></iframe> ' },
            { type: 'text', value: 'В этом примере на страницу будет вставлен сайт example.com с заданной шириной 600 пикселей и высотой 400 пикселей.' },

        ],
    },
    {
        id: 3,
        // title: "Что такое HTML?",
        content: [
            { type: 'header', value: '2. Атрибуты фреймовЗ' },

            { type: 'text', value: 'Тег <iframe> поддерживает несколько атрибутов, которые позволяют настраивать его поведение и внешний вид:' },
            { type: 'text', value: '2.1 `src`: Указывает URL, который будет загружен в фрейме.' },
            { type: 'code', value: '<iframe src="https://www.example.com"></iframe>' },
            { type: 'text', value: '2.2 `width`: Устанавливает ширину фрейма (можно указать в пикселях или процентах).' },
            { type: 'code', value: '<iframe src="https://www.example.com" width="100%"></iframe> ' },
            { type: 'text', value: '2.3 `height`: Устанавливает высоту фрейма (можно указать в пикселях или процентах).' },
            { type: 'code', value: '<iframe src="https://www.example.com" height="500"></iframe>' },
            { type: 'text', value: '2.4 `scrolling`: Указывает, будут ли отображаться полосы прокрутки. Возможные значения:' },
            { type: 'text', value: '`yes`: всегда показывать полосы прокрутки.' },
            { type: 'text', value: '`no`: никогда не показывать полосы прокрутки.' },
            { type: 'text', value: '`auto`: показывать полосы прокрутки только при необходимости.' },
            { type: 'code', value: '<iframe src="https://www.example.com" scrolling="yes"></iframe> ' },
            { type: 'text', value: '2.5 `frameborder`: Устанавливает границу фрейма. Значение 0 отключает границу, а 1 включает. Этот атрибут устарел и не рекомендуется использовать.' },
            { type: 'code', value: '<iframe src="https://www.example.com" frameborder="0"></iframe>' },
        ],
    },
    {
        id: 4,
        // title: "Что такое HTML?",
        content: [
            { type: 'header', value: '3. Безопасность при использовании фреймов' },

            { type: 'text', value: 'Использование <iframe> может представлять определенные риски безопасности, такие как атаки типа "clickjacking". Чтобы минимизировать эти риски, можно использовать следующие методы:' },
            { type: 'text', value: '3.1 `sandbox`: Атрибут sandbox позволяет ограничить действия, которые может выполнять содержимое фрейма. Например, можно запретить выполнение скриптов, формы и другие действия.' },
            { type: 'code', value: '<iframe src="https://www.example.com" sandbox></iframe>' },
            { type: 'text', value: '3.2 `X-Frame-Options`: Это HTTP-заголовок, который может быть установлен на сервере, чтобы предотвратить встраивание страницы в фреймы на других сайтах. Возможные значения:' },
            { type: 'text', value: '`DENY`: запрещает встраивание страницы в фреймы.' },
            { type: 'text', value: '`SAMEORIGIN`: разрешает встраивание только с того же источника.' },
            { type: 'text', value: '`ALLOW-FROM uri`: разрешает встраивание только с указанного URI.' },
            { type: 'text', value: '3.3 `Content Security Policy (CSP)`: Это механизм безопасности, который позволяет контролировать, какие ресурсы могут загружаться на страницу. С помощью директивы frame-ancestors можно указать, какие источники могут встраивать вашу страницу.' },
            { type: 'code', value: "`Content-Security-Policy`: frame-ancestors 'self' https://trusted.com;  " },
            { type: 'text', value: 'Пример использования <iframe>' },
            { type: 'code', value: `
<!DOCTYPE html>
<html lang="ru">
<head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Пример использования iframe</title>
</head>
<body>
            <h1>Встраивание стороннего сайта</h1>
            <iframe src="https://www.example.com" width="600" height="400" scrolling="auto" sandbox></iframe>
</body>
</html>

            ` },

        ],
    },
    {
        id: 5,
        // title: "Что такое HTML?",
        content: [
            { type: 'header', value: 'Заключение' },

            { type: 'text', value: 'Фреймы с помощью тега <iframe> позволяют удобно встраивать сторонний контент на веб-страницы. Используйте атрибуты для настройки внешнего вида и поведения фреймов, а также учитывайте аспекты безопасности, чтобы защитить свой сайт от потенциальных угроз.' },
        ],
    },

];

// --------------------------------------------------------------------------------

export const HtmlDocumentTenth = [
    {
        id: 1,
        title: "Что такое HTML?",
        content: [
            { type: 'text', value: '' },
            { type: 'text', value: '' },
            { type: 'header', value: 'Заголовок для урока 1' },
        ],
    },
    {
        id: 2,
        title: "Основные возможности HTML",
        content: [
            { type: 'text', value: 'Содержимое урока 2...' },
        ],
    },
];

// --------------------------------------------------------------------------------

export const HtmlDocumentEleventh = [
    {
        id: 1,
        title: "Что такое HTML?",
        content: [
            { type: 'text', value: '' },
            { type: 'text', value: '' },
            { type: 'header', value: 'Заголовок для урока 1' },
        ],
    },
    {
        id: 2,
        title: "Основные возможности HTML",
        content: [
            { type: 'text', value: 'Содержимое урока 2...' },
        ],
    },
];
